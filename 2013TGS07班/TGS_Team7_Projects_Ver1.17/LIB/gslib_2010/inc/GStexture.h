/******************************************************************************
* File Name : GStexture.h                         Ver : 1.00  Date : 2002-08-13
*
* Description :
*
*       テクスチャ管理 ヘッダファイル．
*
* Author : Moriharu Ohzu.
*
******************************************************************************/
#ifndef		_GSTEXTURE_H_
#define		_GSTEXTURE_H_

#include	"GStype.h"

/****** データ型宣言 *********************************************************/

/*----- テクスチャフォーマット列挙型 ----------------------------------------*/

typedef	enum
{
	GS_TEX_RGBA = 1						/* 32bit RGBAフォーマット	*/

} GStexformat;

/*----- テクスチャ構造体 ----------------------------------------------------*/

typedef	struct
{
	GStexformat		Format;				/* テクスチャフォーマット	*/
	GSuint			dwWidth;			/* テクスチャの幅			*/
	GSuint			dwHeight;			/* テクスチャの高さ			*/
	void*			pImage;				/* テクスチャイメージ		*/
	GSuint			dwTexName;			/* テクスチャ名 ( OpenGL )	*/

} GStexture;

/****** 関数プロトタイプ宣言 *************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/*=============================================================================
*
* Purpose : テクスチャの生成．
*
* Return  : テクスチャを返す．
*
*============================================================================*/
extern GStexture*
gsTextureNew
(
	void
);

/*=============================================================================
*
* Purpose : テクスチャの消滅．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureDelete
(
	GStexture*		pTexture			/* テクスチャ 			*/
);

/*=============================================================================
*
* Purpose : テクスチャのクリーンアップ．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureCleanUP
(
	GStexture*		pTexture			/* テクスチャ 			*/
);

/*=============================================================================
*
* Purpose : テクスチャの初期化．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureInitialize
(
	GStexture*		pTexture,			/* テクスチャ 				*/
	GStexformat		Format,				/* テクスチャフォーマット	*/
	GSuint			dwWidth,			/* テクスチャの幅			*/
	GSuint			dwHeight			/* テクスチャの高さ			*/
);

/*=============================================================================
*
* Purpose : テクスチャフォーマットの取得．
*
* Return  : なし．
*
*============================================================================*/
extern GStexformat
gsTextureGetFormat
(
	GStexture*		pTexture			/* テクスチャ 				*/
);

/*=============================================================================
*
* Purpose : テクスチャの幅の取得．
*
* Return  : なし．
*
*============================================================================*/
extern GSuint
gsTextureGetWidth
(
	GStexture*		pTexture			/* テクスチャ 				*/
);

/*=============================================================================
*
* Purpose : テクスチャの高さの取得．
*
* Return  : なし．
*
*============================================================================*/
extern GSuint
gsTextureGetHeight
(
	GStexture*		pTexture			/* テクスチャ 				*/
);

/*=============================================================================
*
* Purpose : テクスチャ名の取得．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureBind
(
	GStexture*		pTexture			/* テクスチャ 				*/
);

/*=============================================================================
*
* Purpose : テクスチャイメージのロック．
*
* Return  : なし．
*
*============================================================================*/
extern void*
gsTextureLock
(
	GStexture*		pTexture			/* テクスチャ 				*/
);

/*=============================================================================
*
* Purpose : テクスチャイメージのアンロック．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureUnLock
(
	GStexture*		pTexture			/* テクスチャ 				*/
);

/*=============================================================================
*
* Purpose : テクスチャのカラーキーを設定．
*
* Return  : なし．
*
*============================================================================*/
extern void
gsTextureSetColorKey
(
	GStexture*		pTexture,			/* テクスチャ 				*/
	GSubyte			Red,				/* カラーキー赤成分			*/
	GSubyte			Green,				/* カラーキー緑成分			*/
	GSubyte			Blue				/* カラーキー青成分			*/
);

/*=============================================================================
*
* Purpose : ビットマップファイルからテクスチャを生成する．
*
* Return  : 生成に成功すれば真，失敗したら偽を返す．
*
*============================================================================*/
extern GSboolean
gsTextureLoadBmpFile
(
	GStexture*			pTexture,		/* テクスチャ					*/
	const char*			szFliName		/* 読み込みファイル名			*/
);

#ifdef __cplusplus
}
#endif

#endif

/********** End of File ******************************************************/
