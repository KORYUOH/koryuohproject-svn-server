/******************************************************************************
* File Name : GSgraphics.h                       Ver : 1.00  Date : 2002-07-31
*
* Description :
*
*       ゲームシステム用 グラフィックス処理 ヘッダファイル．
*
* Author : Moriharu Ohzu.
*
******************************************************************************/
#ifndef		_GSGRAPHICS_H_
#define		_GSGRAPHICS_H_

#include	"GStype.h"
#include	"GSmesh.h"
#include	"GSanimation.h"
#include	"GSskeleton.h"
#include	"GStext.h"
#include	"GSoctree.h"

/****** データ型宣言 *********************************************************/

enum									/* 特定機能のシンボル定数			*/
{
	GS_SKIN_MESH = 1,					/* スキニングメッシュ機能			*/
	GS_CALC_SKELETON,					/* スケルトン自動計算機能			*/
	GS_CEL_SHADE,						/* セルシェーディング機能			*/
};

enum									/* テクスチャの透明色モード			*/
{
	/// <summary>
	/// 透明色を使用しない.
	/// </summary>
	GS_TEXCOLOR_KEY_DISABLE = 0,
	/// <summary>
	/// 設定中の透明色を使用する.
	/// </summary>
	GS_TEXCOLOR_KEY,	
	/// <summary>
	/// 左上のテクセルを透明色に使用する.
	/// </summary>
	GS_TEXCOLOR_KEY_AUTO,
		/// <summary>
	/// 透明色を黒に設定する.
	/// </summary>
	GS_TEXCOLOR_KEY_BLACK,
	/// <summary>
	/// 透明色を白に設定する.
	/// </summary>
	GS_TEXCOLOR_KEY_WHITE,
};

/****** 関数プロトタイプ宣言 *************************************************/

#ifdef __cplusplus
extern "C" {
#endif

	/*=============================================================================
	*
	* Purpose : グラフィックシステムの初期化．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsInitGraphics
		(
		void
		);

	/*=============================================================================
	*
	* Purpose : グラフィックシステムの終了処理．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsFinishGraphics
		(
		void
		);

	/*=============================================================================
	*
	* Purpose : メッシュデータの読み込み．
	*
	* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
	*
	*============================================================================*/
	extern GSboolean
		gsLoadMesh
		(
		GSuint			MeshID,				/* メッシュＩＤ				*/
		const char*		pszMshFileName		/* メッシュファイル名		*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンデータファイルの読み込み．
	*
	* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
	*
	*============================================================================*/
	extern GSboolean
		gsLoadSkeleton
		(
		GSuint			SkeletonID,			/* スケルトンＩＤ			*/
		const char*		pszSklFileName		/* スケルトンファイル名		*/
		);

	/*=============================================================================
	*
	* Purpose : アニメーションデータファイルの読み込み．
	*
	* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
	*
	*============================================================================*/
	extern GSboolean
		gsLoadAnimation
		(
		GSuint			AnimationID,		/* アニメーションＩＤ		*/
		const char*		pszAnmFileName		/* アニメーションファイル名	*/
		);

	/*=============================================================================
	*
	* Purpose : テクスチャデータの読み込み．
	*
	* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
	*
	*============================================================================*/
	extern GSboolean
		gsLoadTexture
		(
		GSuint			TextureID,			/* テクスチャＩＤ			*/
		const char*		pszTexFileName		/* テクスチャファイル名		*/
		);

	/*=============================================================================
	*
	* Purpose : オクツリーデータの読み込み．
	*
	* Return  : 読み込みに成功すれば真，失敗すれば偽を返す．
	*
	*============================================================================*/
	extern GSboolean
		gsLoadOctree
		(
		GSuint			OctreeID,			/* オクツリーＩＤ			*/
		const char*		pszOctFileName		/* オクツリーファイル名		*/
		);

	/*=============================================================================
	*
	* Purpose : テクスチャデータの透明色モードの指定．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsTextureColorKeyMode
		(
		GSenum			ColorKeyMode		/* カラーキーモード			*/
		);

	/*=============================================================================
	*
	* Purpose : テクスチャデータの透明色の指定．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsTextureColorKey
		(
		GSubyte			ColorKeyR,			/* 赤成分					*/
		GSubyte			ColorKeyG,			/* 青成分					*/
		GSubyte			ColorKeyB			/* 緑成分					*/
		);

	/*=============================================================================
	*
	* Purpose : メッシュデータの削除．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDeleteMesh
		(
		GSuint			MeshID				/* メッシュＩＤ				*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンデータの削除．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDeleteSkeleton
		(
		GSuint			SkeletonID			/* スケルトンＩＤ			*/
		);

	/*=============================================================================
	*
	* Purpose : アニメーションデータファイルの削除．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDeleteAnimation
		(
		GSuint			AnimationID			/* アニメーションＩＤ		*/
		);

	/*=============================================================================
	*
	* Purpose : テクスチャデータファイルの削除．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDeleteTexture
		(
		GSuint			TextureID			/* テクスチャＩＤ		*/
		);

	/*=============================================================================
	*
	* Purpose : オクツリーデータの削除．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDeleteOctree
		(
		GSuint			OctreeID			/* オクツリーＩＤ		*/
		);

	/*=============================================================================
	*
	* Purpose : メッシュの描画．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDrawMesh
		(
		GSuint			MeshID				/* メッシュＩＤ				*/
		);

	/*=============================================================================
	*
	* Purpose : オクツリーの描画．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDrawOctree
		(
		GSuint			OctreeID			/* オクツリーＩＤ			*/
		);

	/*=============================================================================
	*
	* Purpose : テクスチャをバインドする．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsBindTexture
		(
		GSuint			TextureID			/* テクスチャＩＤ			*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンをバインドする．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsBindSkeleton
		(
		GSuint			SkeletonID			/* スケルトンＩＤ			*/
		);

	/*=============================================================================
	*
	* Purpose : アニメーションをバインドする．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsBindAnimation
		(
		GSuint			AnimationID,		/* アニメーションＩＤ		*/
		GSuint			AnimationNo,		/* アニメーションナンバ		*/
		GSfloat			fTimer				/* アニメーションタイマ		*/
		);

	/*=============================================================================
	*
	* Purpose : アニメーションをバインドする．（ 線形補間 ）
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsBindAnimationLerp
		(
		GSuint			AnimationID1,		/* アニメーションＩＤ		*/
		GSuint			AnimationNo1,		/* アニメーションナンバ		*/
		GSfloat			fTimer1,			/* アニメーションタイマ		*/
		GSuint			AnimationID2,		/* アニメーションＩＤ		*/
		GSuint			AnimationNo2,		/* アニメーションナンバ		*/
		GSfloat			fTimer2,			/* アニメーションタイマ		*/
		GSfloat			fLerp				/* 補間値					*/
		);

	/*=============================================================================
	*
	* Purpose : セルシェーディング用テクスチャをバインドする．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsBindCelShadeTexture
		(
		GSuint			TextureID			/* テクチャＩＤ				*/
		);

	/*=============================================================================
	*
	* Purpose : セルシェーディング用ライトの設定をする．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsLightPositionCelShade
		(
		GSfloat			LightPositionX,		/* ライトｘ座標 			*/
		GSfloat			LightPositionY,		/* ライトｙ座標 			*/
		GSfloat			LightPositionZ		/* ライトｚ座標 			*/
		);

	/*=============================================================================
	*
	* Purpose : セルシェーディングの輪郭線の太さを設定する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsLineWidthCelShade
		(
		GSfloat			LineWidth			/* 輪郭線の太さ				*/
		);

	/*=============================================================================
	*
	* Purpose : セルシェーディングの輪郭線のカラーを設定する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsLineColorCelShade
		(
		GSfloat			LineColorR,			/* 輪郭線の色の赤成分		*/
		GSfloat			LineColorG,			/* 輪郭線の色の緑成分		*/
		GSfloat			LineColorB,			/* 輪郭線の色の青成分		*/
		GSfloat			LineColorA			/* 輪郭線のアルファ成分		*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンデータの姿勢変換行列を計算する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsCalculateSkeleton
		(
		GSmatrix4*		pParentMatrix,		/* 親のモデリング変換行列	*/
		GSmatrix4*		pOrientMatrices		/*-> 姿勢変換行列配列		*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンの姿勢変換行列を設定する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsSetMatrixOrientation
		(
		GSuint			numMatrices,		/* 座標変換行列数			*/
		GSmatrix4*		pOrientMatrices		/* 座標変換行列配列			*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンデータのボーン数を取得する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern GSuint
		gsGetSkeletonNumBones
		(
		GSuint			SkeletonID			/* スケルトンのＩＤ 		*/
		);

	/*=============================================================================
	*
	* Purpose : アニメーションの終了タイマを取得する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern GSuint
		gsGetEndAnimationTimer
		(
		GSuint			AnimationID,		/* アニメーションのＩＤ		*/
		GSuint			AnimationNo			/* アニメーションナンバ		*/
		);

	/*=============================================================================
	*
	* Purpose : 文字フォントのパラメータを設定する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsTextPos
		(
		GSfloat			PositoinX,			/* ｘ座標					*/
		GSfloat			PositoinY			/* ｙ座標					*/
		);

	/*=============================================================================
	*
	* Purpose : 文字フォントのパラメータを設定する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsFontParameter
		(
		GSbitfield		FontCode,			/* 文字フォントの属性		*/
		GSuint			FontPoint,			/* 文字フォントのポイント数	*/
		const char*		pszFontName			/* 文字フォント名			*/
		);

	/*=============================================================================
	*
	* Purpose : テキスト描画．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDrawText
		(
		const char*		pString,			/* 表示する文字列		*/
		...									/* オプションの引数		*/
		);

	/*=============================================================================
	*
	* Purpose : スクリーン座標からレイを計算する．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsCalculateRay
		(
		GSint			ScreenX,			/* スクリーンｘ座標		*/
		GSint			ScreenY,			/* スクリーンｙ座標		*/
		GSfloat*		pRayPosX,			/*-> レイのｘ座標		*/
		GSfloat*		pRayPosY,			/*-> レイのｙ座標		*/
		GSfloat*		pRayPosZ,			/*-> レイのｙ座標		*/
		GSfloat*		pRayDirX,			/*-> レイのベクトル		*/
		GSfloat*		pRayDirY,			/*-> レイのベクトル		*/
		GSfloat*		pRayDirZ			/*-> レイのベクトル		*/
		);

	/*=============================================================================
	*
	* Purpose : メッシュデータの取得．
	*
	* Return  : メッシュデータのポインタを返す．
	*
	*============================================================================*/
	extern GSmesh*
		gsGetMesh
		(
		GSuint			MeshID				/* メッシュＩＤ				*/
		);

	/*=============================================================================
	*
	* Purpose : スケルトンデータの取得．
	*
	* Return  : スケルトンデータのポインタを返す．
	*
	*============================================================================*/
	extern GSskeleton*
		gsGetSkeleton
		(
		GSuint			SkeletonID			/* スケルトンＩＤ			*/
		);

	/*=============================================================================
	*
	* Purpose : アニメショーンデータの取得．
	*
	* Return  : アニメーションデータのポインタを返す．
	*
	*============================================================================*/
	extern GSanimation*
		gsGetAnimation
		(
		GSuint			AnimationID			/* アニメーションＩＤ		*/
		);

	/*=============================================================================
	*
	* Purpose : オクツリーデータの取得．
	*
	* Return  : オクツリーデータのポインタを返す．
	*
	*============================================================================*/
	extern GSoctree*
		gsGetOctree
		(
		GSuint			OctreeID			/* オクツリーＩＤ		*/
		);

	/*=============================================================================
	*
	* Purpose : テクスチャデータの取得．
	*
	* Return  : テクスチャデータのポインタを返す．
	*
	*============================================================================*/
	extern GStexture*
		gsGetTexture
		(
		GSuint			TextureID			/* テクスチャＩＤ		*/
		);

	/*=============================================================================
	*
	* Purpose : 特定機能の有効化．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsEnable
		(
		GSenum			Cap					/* 特定機能を示すシンボル定数 */
		);

	/*=============================================================================
	*
	* Purpose : 特定機能の無効化．
	*
	* Return  : なし．
	*
	*============================================================================*/
	extern void
		gsDisable
		(
		GSenum			Cap					/* 特定機能を示すシンボル定数 */
		);

#ifdef __cplusplus
}
#endif
/****** ライブラリ設定 ********************************************************/

#pragma comment( lib, "opengl32.lib"  )

#ifdef	NDEBUG
# ifdef _MT
#  ifdef _DLL
#   pragma comment( lib, "gsgraphics_md.lib" )
#   pragma comment( lib, "gsutil_md.lib" )
#  else
#   pragma comment( lib, "gsgraphics_mt.lib" )
#   pragma comment( lib, "gsutil_mt.lib" )
#  endif
# else
#  pragma comment( lib, "gsgraphics_ml.lib" )
#  pragma comment( lib, "gsutil_ml.lib" )
# endif
#else
# ifdef _MT
#  ifdef _DLL
#   pragma comment( lib, "gsgraphics_mdd.lib" )
#   pragma comment( lib, "gsutil_mdd.lib" )
#  else
#   pragma comment( lib, "gsgraphics_mtd.lib" )
#   pragma comment( lib, "gsutil_mtd.lib" )
#  endif
# else
#  pragma comment( lib, "gsgraphics_mld.lib" )
#  pragma comment( lib, "gsutil_mld.lib" )
# endif
#endif

#endif

/********** End of File ******************************************************/
