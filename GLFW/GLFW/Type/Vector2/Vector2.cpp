/**===File Commentary=======================================*/
/**
 *	@file	Vector2.cpp
 *
 *	@brief	二次元ベクトル
 *
 *	@author	KORYUOH
 *
 *	@date	2012/06/26
 */
/**===File Include=========================================*/
#include	<Type/Vector2/Vector2.h>
#include	<cmath>
/**===Class Implementation=================================*/

/**========================================================*/
/**
 *	@brief	コンストラクタ
 */
/**========================================================*/
Vector2::Vector2()
	:x_(0),y_(0)
{}
/**========================================================*/
/**
 *	@brief	コンストラクタ
 *	@param[in]	x座標
  *	@param[in]	y座標
 */
/**========================================================*/
Vector2::Vector2(float x,float y)
	:x_(x),y_(y)
{}
/**========================================================*/
/**
 *	@brief	ノルムを求める
 *	@return	ノルム
 */
/**========================================================*/
float Vector2::length()const{
	return (float)std::sqrtf(x_*x_+y_*y_);
}
/**========================================================*/
/**
 *	@brief	正規化を行う
 *	@return	正規化できた場合は正規化した値
 */
/**========================================================*/
Vector2& Vector2::normalize(){
	float len = length();
	if(len != 0){
		return *this /= len;
	}
	return *this;
}
/**========================================================*/
/**
 *	@brief	内積を求める
 *	@param[in]	他のベクトル
 *	@return	内積
 */
/**========================================================*/
float Vector2::InnerProduct(const Vector2& v)const{
	return x_ * v.x_ + y_*v.y_;
}
/**========================================================*/
/**
 *	@brief	単項演算子オーバーロード
 *	@return	ベクトル
 */
/**========================================================*/
Vector2 Vector2::operator+(){
	return *this;
}
/**========================================================*/
/**
 *	@brief	単項演算子オーバーロード
 *	@return	逆ベクトル
 */
/**========================================================*/
Vector2 Vector2::operator-(){
	return Vector2(-x_,-y_);
}
/**========================================================*/
/**
 *	@brief	代入演算子オーバーロード
 *	@param[in]	加算ベクトル
 *	@return	ベクトル
 */
/**========================================================*/
Vector2& Vector2::operator+=(const Vector2& v){
	x_ += v. x_;
	y_ += v.y_;
	return *this;
}
/**========================================================*/
/**
 *	@brief	代入演算子オーバーロード
 *	@param[in]	減算ベクトル
 *	@return	ベクトル
 */
/**========================================================*/
Vector2& Vector2::operator-=(const Vector2& v){
	x_ -= v.x_;
	y_ -= v.y_;
	return *this;
}
/**========================================================*/
/**
 *	@brief	代入演算子オーバーロード
 *	@param[in]	乗算スカラー
 *	@return	ベクトル
 */
/**========================================================*/
Vector2& Vector2::operator*= (float s){
	x_ *= s;
	y_ *= s;
	return *this;
}
/**========================================================*/
/**
 *	@brief	代入演算子オーバーロード
 *	@param[in]	除算スカラー
 *	@return	ベクトル
 */
/**========================================================*/
Vector2& Vector2::operator /= (float s){
	x_ /= s;
	y_ /= s;
	return *this;
}
/**========================================================*/
/**
 *	@brief	2項演算子オーバーロード
 *	@param[in]	ベクトル
 *	@param[in]	ベクトル
 *	@return	ベクトル
 */
/**========================================================*/
const Vector2 operator+(const Vector2& v1,const Vector2& v2){
	Vector2 tmp(v1);
	tmp += v2;
	return tmp;
}
/**========================================================*/
/**
 *	@brief	2項演算子オーバーロード
 *	@param[in]	ベクトル
 *	@param[in]	ベクトル
 *	@return	ベクトル
 */
/**========================================================*/
const Vector2 operator-(const Vector2& v1,const Vector2& v2 ){
	Vector2 tmp ( v1);
	tmp -= v2;
	return tmp;
}
/**========================================================*/
/**
 *	@brief	2項演算子オーバーロード
 *	@param[in]	ベクトル
 *	@param[in]	スカラー
 *	@return	ベクトル
 */
/**========================================================*/
const Vector2 operator*(const Vector2& v,float s){
	Vector2 tmp(v);
	tmp*=s;
	return tmp;
}
/**========================================================*/
/**
 *	@brief	2項演算子オーバーロード
 *	@param[in]	スカラー
 *	@param[in]	ベクトル
 *	@return	ベクトル
 */
/**========================================================*/
const Vector2 operator*(float s,const Vector2& v){
	return v * s;
}
/**========================================================*/
/**
 *	@brief	2項演算子オーバーロード
 *	@param[in]	ベクトル
 *	@param[in]	スカラー
 *	@return	ベクトル
 */
/**========================================================*/
const Vector2 operator / (const Vector2& v,float s){
	Vector2 tmp(v);
	tmp /= s;
	return tmp;
}

/**===End Of File==========================================*/